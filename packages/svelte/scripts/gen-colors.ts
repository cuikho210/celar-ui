/**
 * Generate SCSS theme from Material Color Utilities theme output.
 * Usage: bun gen-material-theme-scss.ts <output-path>
 *
 * This script generates a SCSS file with $material-theme-light and $material-theme-dark maps,
 * using the output of Material Color Utilities' themeFromSourceColor.
 */

import materialDynamicColors from 'material-dynamic-colors';
import path from 'node:path';

// ---- CONFIGURABLE SOURCE COLOR / OUTPUT ----
const argv = Bun.argv.slice(2);
const getFlag = (names: string[]) => {
	const i = argv.findIndex((a) => names.includes(a));
	if (i >= 0 && argv[i + 1] && !argv[i + 1].startsWith('--')) return argv[i + 1];
	const kv = argv.find((a) => names.some((n) => a.startsWith(`${n}=`)));
	return kv ? kv.split('=').slice(1).join('=') : undefined;
};
const sourceColor = (getFlag(['--color', '-c']) || Bun.env.SOURCE_COLOR || '#ff907f').trim();
const outputPath = path.resolve(
	process.cwd(),
	getFlag(['--out', '-o']) || Bun.env.OUTPUT_PATH || 'src/styles/scheme.scss'
);

// ---- GENERATE THEME ----
const theme = await materialDynamicColors(sourceColor);

// ---- SCSS OUTPUT ----
function toScssMap(name: string, obj: Record<string, string>): string {
	const entries = Object.entries(obj)
		.map(([k, v]) => `  color-${k}: ${v}`)
		.join(',\n');
	return `$${name}: (\n${entries}\n);\n`;
}

const scss = `// Generated by gen-material-theme-scss.ts
// Source color: ${sourceColor}

${toScssMap('scheme-light', theme.light as unknown as Record<string, string>)}
${toScssMap('scheme-dark', theme.dark as unknown as Record<string, string>)}
`;

// ---- WRITE FILE ----
await Bun.write(outputPath, scss);
console.log(`Material theme SCSS written to ${outputPath}`);
