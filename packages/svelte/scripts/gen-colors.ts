/**
 * Generate SCSS theme from Material Color Utilities theme output.
 * Usage: bun gen-material-theme-scss.ts <output-path>
 *
 * This script generates a SCSS file with $material-theme-light and $material-theme-dark maps,
 * using the output of Material Color Utilities' themeFromSourceColor.
 */

import { argbFromHex, Scheme, themeFromSourceColor } from '@material/material-color-utilities';
import path from 'node:path';

// ---- CONFIGURABLE SOURCE COLOR ----
const SOURCE_COLOR = '#ff907f'; // You can change this if needed

const outputPath = path.resolve(process.cwd(), 'src/styles/scheme.scss');

// ---- COLOR CONVERSION ----
/**
 * Convert ARGB number to hex string (#rrggbb)
 * @param argb number
 * @returns string
 */
function argbToHex(argb: number): string {
	// ARGB: 0xAARRGGBB
	const r = (argb >> 16) & 0xff;
	const g = (argb >> 8) & 0xff;
	const b = argb & 0xff;
	return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
}

// ---- GENERATE THEME ----
const theme = themeFromSourceColor(argbFromHex(SOURCE_COLOR));

// ---- SCSS OUTPUT ----
function toScssMap(name: string, obj: Scheme): string {
	//@ts-expect-error .props is the actual set of colors
	const props = obj.props as Scheme;
	const entries = Object.entries(props)
		.map(([k, v]) => `  color-${k}: ${argbToHex(v)}`)
		.join(',\n');
	return `$${name}: (\n${entries}\n);\n`;
}

const scss = `// Generated by gen-material-theme-scss.ts
// Source color: ${SOURCE_COLOR}

${toScssMap('scheme-light', theme.schemes.light)}
${toScssMap('scheme-dark', theme.schemes.dark)}
`;

// ---- WRITE FILE ----
await Bun.write(outputPath, scss);
console.log(`Material theme SCSS written to ${outputPath}`);
